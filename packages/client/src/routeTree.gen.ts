/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestdataImport } from './routes/testdata'
import { Route as QueueImport } from './routes/queue'
import { Route as PlayImport } from './routes/play'
import { Route as IndexImport } from './routes/index'
import { Route as GameGameIdImport } from './routes/game/$gameId'

// Create/Update Routes

const TestdataRoute = TestdataImport.update({
  id: '/testdata',
  path: '/testdata',
  getParentRoute: () => rootRoute,
} as any)

const QueueRoute = QueueImport.update({
  id: '/queue',
  path: '/queue',
  getParentRoute: () => rootRoute,
} as any)

const PlayRoute = PlayImport.update({
  id: '/play',
  path: '/play',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GameGameIdRoute = GameGameIdImport.update({
  id: '/game/$gameId',
  path: '/game/$gameId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/play': {
      id: '/play'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayImport
      parentRoute: typeof rootRoute
    }
    '/queue': {
      id: '/queue'
      path: '/queue'
      fullPath: '/queue'
      preLoaderRoute: typeof QueueImport
      parentRoute: typeof rootRoute
    }
    '/testdata': {
      id: '/testdata'
      path: '/testdata'
      fullPath: '/testdata'
      preLoaderRoute: typeof TestdataImport
      parentRoute: typeof rootRoute
    }
    '/game/$gameId': {
      id: '/game/$gameId'
      path: '/game/$gameId'
      fullPath: '/game/$gameId'
      preLoaderRoute: typeof GameGameIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/play': typeof PlayRoute
  '/queue': typeof QueueRoute
  '/testdata': typeof TestdataRoute
  '/game/$gameId': typeof GameGameIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/play': typeof PlayRoute
  '/queue': typeof QueueRoute
  '/testdata': typeof TestdataRoute
  '/game/$gameId': typeof GameGameIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/play': typeof PlayRoute
  '/queue': typeof QueueRoute
  '/testdata': typeof TestdataRoute
  '/game/$gameId': typeof GameGameIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/play' | '/queue' | '/testdata' | '/game/$gameId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/play' | '/queue' | '/testdata' | '/game/$gameId'
  id: '__root__' | '/' | '/play' | '/queue' | '/testdata' | '/game/$gameId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlayRoute: typeof PlayRoute
  QueueRoute: typeof QueueRoute
  TestdataRoute: typeof TestdataRoute
  GameGameIdRoute: typeof GameGameIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlayRoute: PlayRoute,
  QueueRoute: QueueRoute,
  TestdataRoute: TestdataRoute,
  GameGameIdRoute: GameGameIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/play",
        "/queue",
        "/testdata",
        "/game/$gameId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/play": {
      "filePath": "play.tsx"
    },
    "/queue": {
      "filePath": "queue.tsx"
    },
    "/testdata": {
      "filePath": "testdata.tsx"
    },
    "/game/$gameId": {
      "filePath": "game/$gameId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
